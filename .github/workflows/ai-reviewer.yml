name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: 'Authenticate to Google Cloud'
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          audience: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: 'Set up Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Generate Diff, Fetch Context, and Call AI'
        id: ai_review_step
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          PR_DIFF=$(git diff origin/${{ github.base_ref }} ${{ github.head_ref }})
          SEARCH_QUERY="$PR_TITLE"
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          SEARCH_RESULTS=$(curl -X POST -s \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://eu-discoveryengine.googleapis.com/v1/projects/${{ secrets.GCP_PROJECT_ID }}/locations/eu/dataStores/avar-assistant-app_1753569803517_gcs_store/servingConfigs/default_search:search" \
            -d "{\"query\": \"$SEARCH_QUERY\", \"pageSize\": 5}")

          CONTEXT=$(echo "$SEARCH_RESULTS" | jq -r '.results[]?.document.derivedStructData.fields.content.stringValue' | paste -sd "\n---\n")

          PROMPT_TEXT=$(cat <<EOF
          You are an expert AI software architect reviewing a pull request.
          Analyze the following code changes (git diff) and compare them against our project documentation context.
          Your response MUST be a single, valid JSON object with two keys: "reviewComment" (a string with your human-readable review) and "docUpdates" (an array of objects, each with "filePath" and "patch" keys).
          The "patch" value must be a valid diff patch that can be applied with 'git apply'. If no documentation changes are needed, return an empty array for "docUpdates".
          Return ONLY a valid JSON object. Do NOT include any Markdown code fences, extra text, or explanations.

          CONTEXT:
          ---
          ${CONTEXT}
          ---

          GIT DIFF:
          ---
          ${PR_DIFF}
          ---
          EOF
          )

          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT_TEXT" \
            '{
              "contents": [
                {
                  "role": "user",
                  "parts": [ { "text": $prompt } ]
                }
              ],
              "generationConfig": {
                "maxOutputTokens": 8192,
                "temperature": 0.2,
                "topP": 0.8,
                "topK": 40
              },
              "safetySettings": [
                {"category":"HARM_CATEGORY_HARASSMENT", "threshold":"BLOCK_NONE"},
                {"category":"HARM_CATEGORY_HATE_SPEECH", "threshold":"BLOCK_NONE"},
                {"category":"HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold":"BLOCK_NONE"},
                {"category":"HARM_CATEGORY_DANGEROUS_CONTENT", "threshold":"BLOCK_NONE"}
              ]
            }')

          AI_RESPONSE_FULL=$(curl -X POST -s \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            "https://us-central1-aiplatform.googleapis.com/v1/projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/publishers/google/models/gemini-2.5-pro:generateContent" \
            -d "$JSON_PAYLOAD")

          echo "--- RAW AI RESPONSE ---"
          echo "$AI_RESPONSE_FULL"
          echo "--- END RAW AI RESPONSE ---"

          if ! echo "$AI_RESPONSE_FULL" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
            echo "Error: AI response did not contain the expected text field."
            AI_RESPONSE=""
          else
            extract_json() {
              awk '
                BEGIN {injson=0; foundfence=0}
                /^\s*```/ {
                  foundfence=1
                  if (injson==0) {injson=1; next}
                  else {injson=0; next}
                }
                injson==1 {print}
                END {if (foundfence==0) exit 2}
              ' | sed '/^\s*$/d' | xargs
            }

            RAW_TEXT=$(echo "$AI_RESPONSE_FULL" | jq -r .candidates[0].content.parts[0].text)

            # Try to extract JSON from code fences
            CLEANED_TEXT=$(echo "$RAW_TEXT" | extract_json 2>/dev/null)

            # If nothing was found inside code fences, fallback to raw (for LLMs that don't fence at all)
            if [ -z "$CLEANED_TEXT" ]; then
              CLEANED_TEXT=$(echo "$RAW_TEXT" | xargs)
            fi

            # Validate JSON and output for GitHub Actions
            if echo "$CLEANED_TEXT" | jq empty 2>/dev/null; then
              AI_RESPONSE="$CLEANED_TEXT"
            else
              echo "Error: Extracted AI response is not valid JSON."
              AI_RESPONSE=""
              echo "--- DEBUG: RAW TEXT ---"
              echo "$RAW_TEXT"
              echo "--- DEBUG: CLEANED TEXT ---"
              echo "$CLEANED_TEXT"
            fi

            {
              echo "ai_response_json<<EOF"
              echo "${AI_RESPONSE}"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: 'Validate AI Response and Post Comment'
        id: validate_and_post
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_RESPONSE_JSON: ${{ steps.ai_review_step.outputs.ai_response_json }}
        run: |
          AI_JSON="$AI_RESPONSE_JSON"

          if [[ -z "$AI_JSON" ]] || [[ "$(echo "$AI_JSON" | jq -r .reviewComment)" == "null" ]] || [[ -z "$(echo "$AI_JSON" | jq -r .reviewComment)" ]]; then
            echo "AI response is empty or invalid. Posting error message."
            gh pr comment ${{ github.event.pull_request.number }} --body "Error: The AI reviewer failed to generate a valid response. The AI_RESPONSE was empty or malformed."
            echo "is_valid=false" >> $GITHUB_OUTPUT
          else
            echo "AI response is valid. Posting review comment."
            REVIEW_COMMENT=$(echo "$AI_JSON" | jq -r .reviewComment)
            gh pr comment ${{ github.event.pull_request.number }} --body "$REVIEW_COMMENT"
            echo "is_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: 'Apply Documentation Updates'
        if: steps.validate_and_post.outputs.is_valid == 'true' && fromJson(steps.ai_review_step.outputs.ai_response_json).docUpdates[0] != null
        env:
          AI_RESPONSE_JSON: ${{ steps.ai_review_step.outputs.ai_response_json }}
        run: |
          echo "Applying documentation updates..."
          git config user.name "AVAR Assistant AI"
          git config user.email "ai-assistant@example.com"

          echo "$AI_RESPONSE_JSON" | jq -c '.docUpdates[]' | while read -r update; do
            FILE_PATH=$(echo "$update" | jq -r .filePath)
            PATCH_CONTENT=$(echo "$update" | jq -r .patch)
            echo "Applying patch to ${FILE_PATH}..."
            echo -e "${PATCH_CONTENT}" > doc_update.patch

            if git apply --check doc_update.patch; then
              git apply doc_update.patch
              git add "${FILE_PATH}"
            else
              echo "Error: Patch could not be applied cleanly."
              exit 1
            fi
            rm doc_update.patch
          done

          if ! git diff --staged --quiet; then
            git commit -m "docs: AI-generated documentation updates"
            git push origin ${{ github.head_ref }}
          else
            echo "No documentation changes to commit."
          fi
