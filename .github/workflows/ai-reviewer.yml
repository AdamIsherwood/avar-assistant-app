# .github/workflows/ai-reviewer.yml

name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
        with:
          # We need to fetch the full history to compare branches
          fetch-depth: 0 
          # Checkout the PR branch
          ref: ${{ github.head_ref }}

      - name: 'Authenticate to Google Cloud'
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          audience: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: 'Set up Google Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Generate Diff, Fetch Context, and Call AI'
        id: ai_review_step
        # Pass the PR title as an environment variable for safety
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Get the diff of the pull request against the base branch
          PR_DIFF=$(git diff origin/${{ github.base_ref }} ${{ github.head_ref }})

          # Use the PR title from the environment variable
          SEARCH_QUERY="$PR_TITLE"
          
          # Call Vertex AI Search to get relevant documentation context
          SEARCH_RESULTS=$(gcloud discovery-engine search "$SEARCH_QUERY" \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --location="eu" \
            --data-store="avar-assistant-app_1753569803517_gcs_store" \
            --serving-config="default_search" \
            --format="json")

          # Extract the content to build a clean context string
          CONTEXT=$(echo "$SEARCH_RESULTS" | jq -r '.results[].document.derivedStructData.content' | paste -sd "\n---\n")
          
          # Prepare the detailed prompt for the Gemini API
          PROMPT_TEXT=$(cat <<EOF
          You are an expert AI software architect reviewing a pull request.
          Analyze the following code changes (git diff) and compare them against our project documentation context.
          Your response MUST be a single, valid JSON object with two keys: "reviewComment" (a string with your human-readable review) and "docUpdates" (an array of objects, each with "filePath" and "patch" keys).
          The "patch" value must be a valid diff patch that can be applied with 'git apply'. If no documentation changes are needed, return an empty array for "docUpdates".

          CONTEXT:
          ---
          ${CONTEXT}
          ---
          
          GIT DIFF:
          ---
          ${PR_DIFF}
          ---
          EOF
          )
          
          # Save the prompt to a file to pass it to gcloud
          echo "$PROMPT_TEXT" > prompt.txt
          
          # Call the Gemini API via gcloud to get the AI's response
          AI_RESPONSE=$(gcloud ai models predict gemini-1.5-pro-latest \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --location="us-central1" \
            --text-prompt-file="prompt.txt" \
            --format="json" | jq -r .predictions[0].content)

          # Clean up any markdown code fences the AI might add to the JSON response
          AI_RESPONSE=$(echo "$AI_RESPONSE" | sed 's/```json//g' | sed 's/```//g')
          
          # Set the final JSON response as a GitHub Action output
          echo "ai_response_json=${AI_RESPONSE}" >> $GITHUB_OUTPUT

      - name: 'Post Review Comment'
        run: |
          REVIEW_COMMENT=$(echo '${{ steps.ai_review_step.outputs.ai_response_json }}' | jq -r .reviewComment)
          gh pr comment ${{ github.event.pull_request.number }} --body "$REVIEW_COMMENT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 'Apply Documentation Updates'
        # Only run this step if the AI provided any documentation updates
        if: fromJson(steps.ai_review_step.outputs.ai_response_json).docUpdates[0] != null
        run: |
          echo "Applying documentation updates..."
          git config user.name "AVAR Assistant AI"
          git config user.email "ai-assistant@example.com"
          
          # Loop through each documentation update from the AI's response
          echo '${{ steps.ai_review_step.outputs.ai_response_json }}' | jq -c '.docUpdates[]' | while read -r update; do
            FILE_PATH=$(echo "$update" | jq -r .filePath)
            PATCH_CONTENT=$(echo "$update" | jq -r .patch)
            echo "Applying patch to ${FILE_PATH}..."
            echo -e "${PATCH_CONTENT}" > doc_update.patch
            
            # Apply the patch and add the file to the staging area
            if git apply --check doc_update.patch; then
              git apply doc_update.patch
              git add "${FILE_PATH}"
            else
              echo "Error: Patch could not be applied cleanly."
              exit 1
            fi
            rm doc_update.patch
          done
          
          # Commit and push the documentation changes back to the PR branch
          if ! git diff --staged --quiet; then
            git commit -m "docs: AI-generated documentation updates"
            git push origin ${{ github.head_ref }}
          else
            echo "No documentation changes to commit."
          fi
